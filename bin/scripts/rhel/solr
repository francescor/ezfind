#!/bin/bash
#
# eZ Find init script for RHEL and CENTOS.
#
# Usage:
#
# Set the correct SOLR_HOME value, and copy this file to /etc/init.d, then
# - either run chkconfig --add solr, or
# - symlink to /etc/init.d/solr to /etc/rc3.<n>/S70solr and /etc/rc5.<n>/k70solr
#
# Example:
# cp solr /etc/init.d/solr
# cd /etc/init.d && chmod 755 solr
# cd /etc/rc3.d && ln -s ../init.d/solr S70solr
# cd /etc/rc5.d && ln -s ../init.d/solr S70solr
# cd /etc/rc3.d && ln -s ../init.d/solr K70solr
# cd /etc/rc5.d && ln -s ../init.d/solr K70solr
#
# fork by Francesco R. Opencontent
# with the aim of creating a correct init script for Centos 7, suitable to hold many solr init scripts
#
# Convention
# NAME must start with "solr-"
# 
# NAME: solr-NOME
#   es. NAME=solr-multicore-8001
#   es. NAME=solr-singlecore

# DIR_NAME: NOME senza il "solr-" iniziale
#   che e' il nome della directory
#   es. DIR_NAME=multicore-8001
#   es. DIR_NAME=singlecore

# enable with 
# /sbin/chkconfig solr-multicore-8001 on
# then 
# service  solr-multicore-8001 status
# /etc/init.d/solr-multicore-8001 start
# /etc/init.d/solr-multicore-8001 stop
# /etc/init.d/solr-multicore-8001 status
# /etc/init.d/solr-multicore-8001 restart
#
###### CUSTOMIZE FROM HERE #####

# Beware CENTOS 7 read the following (systemd)

# chkconfig: 2345 64 36
# description: SOLR indexing server solr-multicore-9001
# processname: solr-multicore-9001
# pidfile: /var/run/solr-multicore-9001.pid

# NAME must start with "solr-"
NAME="solr-multicore-9001"

###### CUSTOMIZE TO HERE #####


DESC="Solr indexing server $NAME"
# remove first 5 chars (solr-) from NAME
DIR_NAME=${NAME:5}
SOLR_HOME="/home/solr/$DIR_NAME/java"

JAVA="/home/solr/$DIR_NAME/link_to_java_in_solr_directory"
if [ ! -x "$JAVA" ]
then
        # the following reate a symbolic link "/home/solr/$DIR_NAME/link_to_java_in_solr_directory" we then
        # use below to identify correct pid
        ln -s /etc/alternatives/java $JAVA
fi

if [ ! -x "$JAVA" ]
then
        echo "Unable to locate java. Please set JAVA_HOME environment variable."
        exit
fi

source /etc/rc.d/init.d/functions


RETVAL=0

d_start() {
    CURRENT_DIR=`pwd`
    cd "$SOLR_HOME"
    daemon --check "$NAME" --pidfile "/var/run/$NAME.pid" nohup $JAVA -jar start.jar > /dev/null 2>&1 &
    cd "$CURRENT_DIR"
    sleep 1 # Sleep 1 second, to make sure java is registered.

    # Using pidof is not good, as there might be other java processes as well.
    # Replaced this by calling ps. Still, this is somewhat awkward.
    # 2014-10-10 alex.schuster@ez.no
    #pid=`pidof java`
    # Centos 6
    #pid=`ps ax | grep '[/]usr/bin/java -jar start.jar' | grep -v nohup | awk '{ print $1 }'`
    # Centos 7
    # pid=`ps ax | grep '[/]bin/java -jar start.jar' | grep -v nohup | awk '{ print $1 }'`
    # 
    # fix francesco  
    # with the following we are sure to pick up the correct pid, even if many other solr are already running
    #
    pid=`ps ax | grep "$JAVA -jar start.jar" | grep -v nohup |  grep -v grep | awk '{ print $1 }'`
    if [ -z $pid ]
    then
        echo "Error starting $NAME!"
        return 1
    fi
    echo $pid > "/var/run/$NAME.pid"
    touch "/var/lock/subsys/$NAME"
    return 0
}

d_stop() {
    killproc -p /var/run/$NAME.pid "$NAME" >> /dev/null 2>&1
    RETVAL=$?
    [ $RETVAL -eq 0 ] && rm -f "/var/lock/subsys/$NAME"
    return $RETVAL
}

d_restart() {
    d_stop  > /dev/null 2>&1
    sleep 1
    d_start > /dev/null 2>&1
}

d_reload() {
    killproc -p /var/run/$NAME.pid "$NAME" -HUP > /dev/null 2>&1
    RETVAL=$?
    return $RETVAL
}

d_status() {
    status -p /var/run/$NAME.pid "$NAME" > /dev/null 2>&1
    return $?
}

case "$1" in
  start)
    echo " * Starting $DESC ($NAME)"
    d_status
    if [ $? -eq 0 ]
    then
      echo "   ...already running."
    else
      if d_start
      then
        echo "   ...done."
      else
        echo "   ...failed."
        RETVAL=1
      fi
    fi
    ;;
  stop)
    echo " * Stopping $DESC ($NAME)"
    if d_stop
    then
      echo "   ...done."
    else
      echo "   ...failed."
      RETVAL=1
    fi
    ;;
  restart)
    echo " * Restarting $DESC ($NAME)"
    d_status
    if [ $? -ne 0 ]
    then
      echo "   ...not running."
      RETVAL=1
    else
      if d_restart
      then
        echo " * ...done."
      else
        echo " * ...failed."
        RETVAL=1
      fi
    fi
    ;;
  reload)
    echo " * Reloading $DESC ($NAME): "
    d_reload
    echo "   ...done."
    ;;
  status)
    d_status
    if [ $? -eq 0 ]
    then
      echo " * $DESC ($NAME) is running"
    else
      echo " * $DESC ($NAME) is not running"
    fi
    ;;
  *)
    echo $"Usage: $0 {start|stop|restart|reload|status}"
    RETVAL=1
esac

exit $RETVAL
